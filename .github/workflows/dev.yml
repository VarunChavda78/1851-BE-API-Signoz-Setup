name: "1851_Development"
on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy or Infra Change'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - infra-change

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  IMAGE_TAG: ${{ github.sha }}
  ECS_SERVICE: development-API-Admin-BE-API
  ECS_CLUSTER: development-API       
  ECS_TASK_DEFINITION: development-API-Admin-BE-API         
  CONTAINER_NAME: app
  CONTAINER_NAME_NGINX: nginx
  APP_REPOSITORY: 1851-admin-be-api
  NGINX_REPOSITORY: 1851-admin-be-nginx

jobs:
  Build:
    name: "Build"
    runs-on: "ubuntu-latest"
    steps:
      
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECRs
        id: build-image
        env:
           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
                sh env/dev.sh
                docker build -f Docker/Dockerfile -t $ECR_REGISTRY/$APP_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$APP_REPOSITORY:$IMAGE_TAG
                echo "app=$ECR_REGISTRY/$APP_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
                docker build  -f Docker/Dockerfile-nginx -t $ECR_REGISTRY/$NGINX_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$NGINX_REPOSITORY:$IMAGE_TAG
                echo "nginx=$ECR_REGISTRY/$NGINX_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  Scan:
    name: "Scan"
    runs-on: "ubuntu-latest"
    needs: Build
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
    
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          export PATH=$PATH:./bin

      - name: Download HTML Template for Trivy
        run: curl -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Scan WEB Image with Trivy and Generate HTML Report
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ./bin/trivy image --timeout 10m --format template --template "@html.tpl" -o Admin-Be-Api-report.html --scanners vuln "$ECR_REGISTRY/$APP_REPOSITORY:$IMAGE_TAG"

      - name: Upload Trivy Report to S3
        run: |
          web_report_url="https://s3.amazonaws.com/1851-trivi-reports/Admin-Be-Api-report.html"
          aws s3 cp Admin-Be-Api-report.html s3://1851-trivi-reports/Admin-Be-Api-report.html
          echo "Web scan report uploaded: $web_report_url"

      - name: Fail Pipeline if Critical Vulnerabilities with Available Fixes Found
        run: |
          if grep -A 5 '<tr class="severity-CRITICAL">' Admin-Be-Api-report.html | grep -B 5 '<td class="fixed-version">[^<]'; then
            echo "CRITICAL vulnerabilities with available fixes found in WEB image. Failing the pipeline."
            exit 1
          elif grep '<tr class="severity-CRITICAL">' Admin-Be-Api-report.html; then
            echo "CRITICAL vulnerabilities found but no fixes available. Continuing pipeline."
          else
            echo "No CRITICAL vulnerabilities found in WEB image."
          fi    
          
                    

  
  Deployment:
    name: "Deployment"
    runs-on: "ubuntu-latest"
    needs: Scan
    if: ${{ github.event_name == 'push' || (github.event.inputs.deploy == 'deploy') }}
    timeout-minutes: 5
    
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Download task definition
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
            echo "NGINX_IMAGE=$ECR_REGISTRY/$NGINX_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
            echo "APP_IMAGE=$ECR_REGISTRY/$APP_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
            aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def_nginx
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1.3.0
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME_NGINX }}
          image: ${{ env.NGINX_IMAGE }}
          

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.3.0
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          task-definition: ${{ steps.task-def_nginx.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.APP_IMAGE }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true



  Infra-Change:
    name: "Infra-change"
    runs-on: ubuntu-latest
    needs: Scan
    if: ${{ github.event.inputs.deploy == 'infra-change' }}
    steps:
        - name: "Checkout Code"
          uses: "actions/checkout@v2"
        
        - name: add tags to ecs
          run: sed -i "s|<changeme>|${{ env.IMAGE_TAG }}|g" ./terraform/1851-dev-ecs/ecs-service.tf
        
        - name: Configure AWS credential
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
            aws-region: ${{ secrets.AWS_REGION }}
  
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
  
  
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: 1.3.2
  
        - name: Terraform Init
          id: init 
          run: terraform init
          working-directory: ./terraform/1851-dev-ecs
  
        - name: Terraform state
          id: state
          run: terraform state rm aws_ecs_task_definition.service
          working-directory: ./terraform/1851-dev-ecs
          continue-on-error: true
  
        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color
          working-directory: ./terraform/1851-dev-ecs
  
        - name: Terraform Plan
          id: plan
          run: terraform plan -no-color -input=false 
          working-directory: ./terraform/1851-dev-ecs
  
        - name: Terraform Apply
          run: terraform apply -auto-approve -input=false 
          working-directory: ./terraform/1851-dev-ecs