name: "1851_Production"
on:
  workflow_dispatch:
    inputs:
      job-selection:
        description: 'Select the job to run'
        required: true
        default: 'Prod-Deployment'
        type: choice
        options:
          - Prod-Deployment
          - Infra-Change+code

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  IMAGE_TAG: ${{ github.sha }}
  ECS_SERVICE: 1851-prod-API-Admin-BE-API
  ECS_CLUSTER: 1851-prod-API
  ECS_TASK_DEFINITION: 1851-prod-API-Admin-BE-API
  CONTAINER_NAME: app
  CONTAINER_NAME_NGINX: nginx
  APP_REPOSITORY: 1851-admin-be-api
  NGINX_REPOSITORY: 1851-admin-be-nginx

jobs:
  Build-Nginx:
    name: "Build Nginx"
    runs-on: "ubuntu-latest"
    outputs:
      nginx_image: ${{ steps.build-nginx.outputs.nginx }}
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push nginx image
        id: build-nginx
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          NGINX_REPOSITORY: supplier-api-nginx
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build  -f Docker/Dockerfile-nginx-prod -t $ECR_REGISTRY/$NGINX_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$NGINX_REPOSITORY:$IMAGE_TAG
          echo "nginx=$ECR_REGISTRY/$NGINX_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  Prod-Deployment:
    name: "Prod-Deployment"
    runs-on: "ubuntu-latest"
    needs: Build-Nginx
    if: ${{ github.event.inputs.job-selection == 'Prod-Deployment' }}
    timeout-minutes: 10
    
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Configure AWS credentials for dev account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Dev Amazon ECR
        id: login-ecr-dev
        uses: aws-actions/amazon-ecr-login@v1

      - name: Configure AWS credentials for prod account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Prod Amazon ECR
        id: login-ecr-prod
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Download task definition and set environment
        env:
          DEV_ECR_REGISTRY: ${{ steps.login-ecr-dev.outputs.registry }}
          PROD_ECR_REGISTRY: ${{ steps.login-ecr-prod.outputs.registry }}
        run: |
            # Get the task definition
            aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json
            
            # Get production environment variables from Secrets Manager
            aws secretsmanager get-secret-value --secret-id arn:aws:secretsmanager:us-east-1:580880756845:secret:1851-Admin-BE-API-Prod-hilfCK \
            | jq -r '.SecretString' > prod-env.json
            
            # Set image URIs
            echo "NGINX_IMAGE=$PROD_ECR_REGISTRY/$NGINX_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
            echo "APP_IMAGE=$DEV_ECR_REGISTRY/$APP_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
            
            # Transform secrets into ECS format for app container only
            SECRET_ARN="arn:aws:secretsmanager:us-east-1:580880756845:secret:1851-Admin-BE-API-Prod-hilfCK"
            jq --arg env "$(cat prod-env.json)" --arg arn "$SECRET_ARN" --arg app_container "$CONTAINER_NAME" '
              .containerDefinitions[] |= (
                if .name == $app_container then
                  . + {
                    environment: [],
                    secrets: ($env | fromjson | to_entries | map({
                      name: .key,
                      valueFrom: ($arn + ":" + .key + "::")
                    }))
                  }
                else
                  . + {
                    environment: [],
                    secrets: []
                  }
                end
              )
            ' task-definition.json > task-definition-with-env.json
            mv task-definition-with-env.json task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition (nginx)
        id: task-def_nginx
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-prod.outputs.registry }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1.3.0
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME_NGINX }}
          image: ${{ env.NGINX_IMAGE }}
          
      - name: Fill in the new image ID in the Amazon ECS task definition (app)
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.3.0
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-dev.outputs.registry }}
        with:
          task-definition: ${{ steps.task-def_nginx.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.APP_IMAGE }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  Infra-Change:
    name: "Infra-Change+code"
    runs-on: "ubuntu-latest"
    needs: Build-Nginx
    if: ${{ github.event.inputs.job-selection == 'Infra-Change+code' }}
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: add tags to ecs
        run: |
         sed -i "s|${data.aws_ecr_repository.app.repository_url}:<changeme>|025212946569.dkr.ecr.us-east-1.amazonaws.com/1851-admin-be-api:${{ env.IMAGE_TAG }}|g" ./terraform/1851-prod-ecs/ecs-service.tf
         sed -i "s|<changeme>|${{ env.IMAGE_TAG }}|g" ./terraform/1851-prod-ecs/ecs-service.tf

      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.2

      - name: Terraform Init
        id: init 
        run: terraform init
        working-directory: ./terraform/1851-prod-ecs

      - name: Terraform state
        id: state
        run: terraform state rm aws_ecs_task_definition.service
        working-directory: ./terraform/1851-prod-ecs
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform/1851-prod-ecs

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false 
        working-directory: ./terraform/1851-prod-ecs

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false 
        working-directory: ./terraform/1851-prod-ecs