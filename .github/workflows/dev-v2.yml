name: "1851_Development-v2"
on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  IMAGE_TAG: ${{ github.sha }}
  APP_REPOSITORY: 1851-admin-be-api

jobs:
  Build-App:
    name: "Build App"
    uses: ./.github/workflows/docker-build.yml
    secrets:
      AWS_ROLE_TO_ASSUME_DEV: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

  Scan:
    name: "Scan"
    runs-on: "ubuntu-latest"
    needs: Build-App
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
    
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          export PATH=$PATH:./bin

      - name: Download HTML Template for Trivy
        run: curl -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Scan WEB Image with Trivy and Generate HTML Report
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ./bin/trivy image --timeout 10m --format template --template "@html.tpl" -o Admin-Be-Api-report.html --scanners vuln "$ECR_REGISTRY/$APP_REPOSITORY:$IMAGE_TAG"

      - name: Upload Trivy Report to S3
        run: |
          web_report_url="https://s3.amazonaws.com/1851-trivi-reports/Admin-Be-Api-report.html"
          aws s3 cp Admin-Be-Api-report.html s3://1851-trivi-reports/Admin-Be-Api-report.html
          echo "Web scan report uploaded: $web_report_url"

      - name: Fail Pipeline if Critical Vulnerabilities with Available Fixes Found
        run: |
          if grep -A 5 '<tr class="severity-CRITICAL">' Admin-Be-Api-report.html | grep -B 5 '<td class="fixed-version">[^<]'; then
            echo "CRITICAL vulnerabilities with available fixes found in WEB image. Failing the pipeline."
            exit 1
          elif grep '<tr class="severity-CRITICAL">' Admin-Be-Api-report.html; then
            echo "CRITICAL vulnerabilities found but no fixes available. Continuing pipeline."
          else
            echo "No CRITICAL vulnerabilities found in WEB image."
          fi    
          
  Deployment:
    name: "Deployment"
    runs-on: "ubuntu-latest"
    needs: [Build-App,Scan]
    
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update image tag in docker-compose-1851-dev.yaml
        run: |
          sed -i -E "s|(image: [^:]+:).*|\1${{ env.IMAGE_TAG }}|" ./docker-compose-1851-dev.yaml

      - name: Copy updated docker-compose file to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: "./docker-compose-1851-dev.yaml,./env/dev.sh"
          target: "/srv/1851-dev/admin-be-api/"

      - name: Execute remote SSH commands
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            set -e
            sh /home/ubuntu/dev-ecr-login.sh
            cd /srv/1851-dev/admin-be-api
            sh env/dev.sh
            docker stack deploy --with-registry-auth -c docker-compose-1851-dev.yaml 1851_dev_admin-be-api
        
     